React это основаня библиотека для создания пользовательских интерфейсов.
React DOM библиотека входящая в состав React. Отвечает за визуализацию, отрисовку, работу компонентов.

Multi Page application (многостраничное приложение) это такой подход по которому работает классические клиентские приложения. Это когда каждый html файл обладает своим содежимым(js скрипты) и каждый такой html файл это как каждая отдельная страница и между этими страница переключение происходит с помощью специальных ссылок. Минус такого подхода в том, что при переходи на новую страницу загружается полностью другой html файл, при этом какие то части как меню или тп остаются прежнеми и получается что они каждый раз подкачиаются заново. Минус еще в том что пользователь будет видеть переходы мужду страницами, загрузку окна браузреа и тп.

Single page application (одностраничное приложение) этот подход позволяет разрабатывать React. При этом подходе во всем приложении используется один html файл (чаще всего это index.html), котоырй имет простое содержимое, вся работа приложения осуществляется с помощью отдельных компонентов. Плюсы быстрая работа. При переходе между страницами некоторые блоки (меню и тп) не загружаеются полностью каждый раз.

React использует компонентный подход, т.е. одни компоненты могут быть вложены в другой и тем самым создаются сложные приложения.

React строит под копотом Virtual DOM (или дерево элементов) это более легкий аналог обычного DOM дерева в браузере - это специальная древовидная структура, которая позволяет управлять HTML-разметкой из JavaScript-кода. React упращает работу с DOM деревом, т.е. при изменении данных, миханизмы reacta автоматические меняет интерфейс, т.е. в ручную обновлять DOM дерево не нужно.
Когда в узлах Virtual DOM произошли какие то изменения они сразу не переносятся в DOM дерева бразуреа, react строит новое дерево элементов с обновленными значениями и сравнивает это дерево с предыдущей версией, эта фаза называется согласование (Reconciliation). После того как react нашел разницу между двумя этими деревами происходит фаза Render - визуализации рендеринга, отрисовки, т.е. обновление DOM дерева в браузере, т.е. мы видим новые даныые на странице. При этом для каждого изменения react устанавливает свою приорететность, более приорететные изменения он вносит быстрее. Это упращает работу разработчику, потому что react отвечает за визуализацию страницы.

Прежде чем установить React нужно установить Node.js

Команда установки реакта npx create-react-app myApp

JSX – это специальный XML-подобный синтаксис технологии React, который позволяет нам очень просто описывать пользовательский интерфейс. JSX позволяет использовать html теги в js файлах.
Пример JSX
root.render(
    <div>
      <App />
    </div>
);

*******************

Компоненты можно создавать через функцию, а так же через классы. Класс возвращает значение через render. Классовый компонент это устаревший подход.

useState (хук) - это функция, которая используется для хранения или управления состояния в функциональном компоненте. С помощью этой функции реакт понимаем какие дынные в компоненте были изменены. 

В классовом компоненете нельязя использовать хуки (useState и тп) для хранения состояния в классовом используется constructor, в которое можно передавать параметры (props)

Ниже пример компонента через класс

class ClassCounter extends React.Component {

    constructor(props){
    super(props);
    this.state = {
    }

    }

    render(){
        return(
            <div>

            </div>
        )
    }
}

Ниже пример компонента через функцию

function App() {

  const [count, setCount] = useState(0); 

  return (
    <div className='App'> 

    </div>
  );
}

Разработчики реакта рекомендуют использовать функциональные компоненты и хуки для того что бы управлять этими компонентами.
Хуки это фукнции, которые предостовляет реакт, они всегда начинаются со слова use (useState, useEffect...). Хуки можно использовать только на верхнем уровне вложености компонента, т.е. их нельзя вкладывать в функции, условия и циклы. Можно создавать свои хуки с различным фунцкионалом.

****************************

Что бы добавить элементу css класс нужно прописать className

****************************

Компонент может принемать в себя некоторые входные данные их называют Props.
Ключи (key) должны хранить уникальные значения, как правило это id объектра, который мы используем. Ключи позволяют алгоритмам реакт более эффективно делать рендеринг и перересовывать не весь список, а только те элементы в которых произошли изменения.

По умолчанию реакт не знает в какое место компонента необходимо добавлять вложенные элементы для этого предназначен специальный пропс props.children

Стили объекта можно прописать в JSX 
<h1 style={{textAlign: 'center'}}>Заголовок</h1> // название свойства пишется слитно, в чистом css это text-align

В любом компоненте может быть только один корнивой блок <div>

***
50:45 Хук useRef 

С помощью хука useRef мы можем получить доступ к DOM элементу и забрать у этого дома элемента value (ref={})














*****************************

Деструктуризация - это новый синтаксис. ES6, который помогает присваивать несколько значений из массива или объекта в переменные.

Инкремент - увелечение значения переменной
Диинкремент - уменьшение значения переменной

onChange функуия позволяет нам прослушивать изменение значения входных данных

bind - Метод предназначен для явной привязки контекста (this) к функции

map - функция позволяет получить новый массив приобразовав все элементы